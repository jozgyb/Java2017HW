package hu.ppke.itk.java2018.jozgy.hf02;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import java.util.ArrayList;

public class Picture implements Component {
	private ArrayList<Group> pictureGroups = new ArrayList<>();

	public void build(Reader input) throws IOException, SyntaxErrorException {
		BufferedReader inputBuffer = new BufferedReader(input);
		while (inputBuffer.ready()) {
			String line = inputBuffer.readLine();
			String command = new String();
			if (line.contains(" ")) {
				command = line.substring(line.indexOf(" "));
			} else {
				command = line;
			}
			switch (command) {
			case "add_line_segments":
				String polyLineArgumentsInLine = line.substring(line.indexOf(" ") + 1, line.length());
				String[] polyLineArguments = polyLineArgumentsInLine.split(" ");
				ArrayList<Integer> argumentsAsIntegers = new ArrayList<>();
				for (int i = 0; i < polyLineArguments.length; i++) {
					argumentsAsIntegers.add(Integer.parseInt(polyLineArguments[i]));
				}
				if (argumentsAsIntegers.size() < 4 || argumentsAsIntegers.size() % 2 != 0) {
					// TODO: throw excception keves vagy nem paros szamu az argumentum
				} else {
					PolyLine newPolyLine = new PolyLine();
					for (int i = 0; i < argumentsAsIntegers.size(); i++) {
						if (i % 2 == 0) {
							newPolyLine.setPointX(argumentsAsIntegers.get(i));
						} else {
							newPolyLine.setPointY(argumentsAsIntegers.get(i));
						}
					}
					pictureGroups.get(pictureGroups.size() - 1).addComponent(newPolyLine);
				}
				break;
			case "add_circle":
				String circleArgumentsInLine = line.substring(line.indexOf(" ") + 1, line.length());
				String[] circleArguments = circleArgumentsInLine.split(" ");
				if (circleArguments.length != 3) {
					// TODO: throw excception keves az argumentum
				} else {
					Circle newCircle = new Circle(Float.parseFloat(circleArguments[0]),
							Float.parseFloat(circleArguments[1]), Float.parseFloat(circleArguments[2]));
					pictureGroups.get(pictureGroups.size() - 1).addComponent(newCircle);
				}
				break;

			case "add_rectangle":
				String rectangleArgumentsInLine = line.substring(line.indexOf(" ") + 1, line.length());
				String[] rectangleArguments = rectangleArgumentsInLine.split(" ");
				if (rectangleArguments.length != 4) {
					// TODO: throw excception keves az argumentum
				} else {
					Rectangle newRectangle = new Rectangle(Float.parseFloat(rectangleArguments[0]),
							Float.parseFloat(rectangleArguments[1]), Float.parseFloat(rectangleArguments[2]),
							Float.parseFloat(rectangleArguments[3]));
					pictureGroups.get(pictureGroups.size() - 1).addComponent(newRectangle);
				}
				break;

			case "new_group":
				Group newGroup = new Group();
				pictureGroups.add(newGroup);
				break;

			case "translate":
				String translateArgumentsInLine = line.substring(line.indexOf(" ") + 1, line.length());
				String[] translateArguments = translateArgumentsInLine.split(" ");
				if (translateArguments.length != 2) {
					// TODO: throw excception keves az argumentum
				} else {
					// for (int i = 0; i < pictureGroups.size(); i++) {
					// pictureGroups.get(i).translate(Float.parseFloat(translateArguments[0]),
					// Float.parseFloat(translateArguments[1]));
					// }
					this.translate(Float.parseFloat(translateArguments[0]), Float.parseFloat(translateArguments[1]));
				}
				break;

			case "flip_vertical":
				String flip_verticalArgumentsInLine = line.substring(line.indexOf(" ") + 1, line.length());
				String[] flip_verticalArguments = flip_verticalArgumentsInLine.split(" ");
				if (flip_verticalArguments.length != 1) {
					// TODO: throw excception keves az argumentum
				} else {
					for (int i = 0; i < pictureGroups.size(); i++) {
						// pictureGroups.get(i).flipVertical(Float.parseFloat(flip_verticalArguments[0]));
						this.flipVertical(Float.parseFloat(flip_verticalArguments[0]));
					}
				}
				break;

			case "flip_horizontal":
				String flip_horizontalArgumentsInLine = line.substring(line.indexOf(" ") + 1, line.length());
				String[] flip_horizontalArguments = flip_horizontalArgumentsInLine.split(" ");
				if (flip_horizontalArguments.length != 1) {
					// TODO: throw excception keves az argumentum
				} else {
					// for (int i = 0; i < pictureGroups.size(); i++) {
					// pictureGroups.get(i).flipVertical(Float.parseFloat(flip_horizontalArguments[0]));
					// }
					this.flipHorizontal(Float.parseFloat(flip_horizontalArguments[0]));
				}
				break;

			case "merge":
				pictureGroups.set(pictureGroups.size() - 2, pictureGroups.get(pictureGroups.size() - 1));
				break;
			default:
				break;
			}
		}

	}

	@Override
	public void write(Writer output) throws IOException {
		BufferedWriter pictureWriter = new BufferedWriter(output);
		pictureWriter.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>");
		pictureWriter.newLine();
		pictureWriter.write("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">");
		pictureWriter.newLine();
		pictureWriter.flush();
		pictureGroups.get(pictureGroups.size() - 1).write(output);
		pictureWriter.write("</svg>");
		pictureWriter.flush();
	}

	@Override
	public void translate(float dx, float dy) {
		pictureGroups.get(pictureGroups.size() - 1).translate(dx, dy);

	}

	@Override
	public void flipHorizontal(float axis) {
		pictureGroups.get(pictureGroups.size() - 1).flipHorizontal(axis);

	}

	@Override
	public void flipVertical(float axis) {
		pictureGroups.get(pictureGroups.size() - 1).flipVertical(axis);

	}

	public static void main(String args[]) throws IOException {
		try {
			Picture picture = new Picture();

			picture.build(new FileReader(args[args.length - 2]));

			if (args[0].equals("--html")) {

			} else {
				picture.write(new FileWriter(args[args.length - 1]));
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SyntaxErrorException e) {
			e.printStackTrace();
		}
	}

}
