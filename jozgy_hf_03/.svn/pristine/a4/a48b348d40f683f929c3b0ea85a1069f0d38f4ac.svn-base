package hu.ppke.itk.java2018.jozgy.hf03;

import java.time.Instant;
import java.util.ArrayList;

public class Hero implements Runnable{
	private String name;
	private int reputation;
	private ArrayList<String> inventory;
	private Quest currentQuest;
	
	static Queue queue = new Queue();
	
	public Hero(String name, int notoriety) {
		super();
		this.name = name;
		this.reputation = notoriety;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getReputation() {
		return reputation;
	}

	public void setReputation(int reputation) {
		this.reputation = reputation;
	}


	public void setInventory(String item) {
		inventory.add(item);
	}
	
	public void removeFromInventory(String item) {
		inventory.remove(item);
	}

	protected void approachNoticeBoard () {
		Instant instant = Instant.now();
		System.out.println(instant + " " + name + " " + "odamegy a hirdetőtáblához és végignézi a listát.");
		try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	protected void pickQuest() {
		ArrayList<Quest> temp = queue.board.getAvailableQuests();
		for (int i = 0; i < temp.size(); i++) {
			if(temp.get(i).getRequiredReputation() <= reputation) {
				Instant instant = Instant.now();
				System.out.println(instant + " " + name + " " + "elvállalja a " + ". küldetést, és átadja a helyét a táblánál.");
				currentQuest = temp.get(i);
			}
			//TODO ha nem talal hirdetest lekezelni
		}
	}
	
	protected void checkStorage() {
		ArrayList<String> availableItems = queue.board.getAvailableItems();
		ArrayList<String> requiredItems = currentQuest.getRequiredEquipments();
		for (int j= 0; j < requiredItems.size(); j++) {
			for (int i = 0; i < availableItems.size(); i++) {
				if(requiredItems.get(j) == availableItems.get(i)) {
					inventory.add(availableItems.get(i));
					queue.board.removeItem(availableItems.get(i));
				}
			} 
		}
		
		if(inventory.size() == availableItems.size()) {
			Instant instant = Instant.now();
			System.out.printf(instant + " " + name + "felmarkolja a {");
			for (int i = 0; i < inventory.size(); i++) {
				if(i != inventory.size() - 1) {
					System.out.println(inventory.get(i) + ", ");
				}
				else {
					System.out.println(inventory.get(i) + "}-t  és elindul a küldetésre.");
				}
				try {
					Thread.sleep((long)currentQuest.getRequiredTime());
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		//TODO ha nem talalja az itemet
	}
	
	@Override
	public void run() {
		synchronized(queue) {
			approachNoticeBoard();
			pickQuest();
		}
		checkStorage();
	}
	
}
